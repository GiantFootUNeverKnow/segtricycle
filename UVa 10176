#include <iostream>
#include <stdio.h>
#include <cmath>
#include <string.h>
#include <vector>

using namespace std;

int tens[5] = {1, 10, 100, 1000, 10000};

int generateS(int n,long long offset){
	//generate sequense Sn until the offset shows up, return the corresponding digits
	long long lenS = 0;
	int i;
	for (i = 1; i <= n; i++){
		if (i < 10)
			lenS = 1;
		else if (i < 100)
			lenS = 2;
		else if (i < 1000)
			lenS = 3;
		else if (i < 10000)
			lenS = 4;
		else lenS = 5;
		//lenS = sstm.str().length();
	       //cout << "offset is " << offset << " n is " << n << " lenS is " << lenS << endl;
		if (lenS >= offset)
			break;
		else 
			offset -= lenS;		
	}
	return (i / tens[lenS - offset]) % 10;
}

int main(){
	//freopen("file.txt","r",stdin);
	long long B[50000];
	B[0] = 0;
	for (int i = 1; i < 10; i ++){
		B[i] = B[i-1] + i;
	}
	for (int i = 10; i < 100; i++){
		B[i] = B[i-1] + 2 * i - 9;
	}
	for (int i= 100; i < 1000; i++){
		B[i] = B[i-1] + 3 * i - 9 - 99;
	}
	for (int i= 1000; i < 10000; i++){
		B[i] = B[i-1] + 4 * i - 9 - 99 - 999;
	}
	for (int i = 10000; i < 50000; i ++){
		B[i] = B[i-1] + 5 * i - 9 - 99 - 999 - 9999;
	}
	//preprossessing
	int tcase;
	cin >> tcase;
	long index;
	while (tcase--){
		cin >> index;
		int j;
		for ( j = 0; j < 50000; j++){
			if (B[j + 1] >= index) break;
		}// maybe sub by binary search technique
		long long offset = index - B[j];
		cout << generateS(j + 1,offset) << endl;
	}
	return 0;
}
