#include <math.h>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <cstdlib>
#include <vector>

using namespace std;

vector<long> primeList; 
/**
@ see Euler 007, impolementation borrowed from there
*/

bool ifPrime(long num){
	//test if any prime in our prime list can devide num
	for (int i = 0; i < primeList.size(); i++)
	{
		if (primeList[i] == num)
			return true;
		if (num % primeList[i] == 0) return false;
	}
	return true;
}

void primeGenerator(){
	//start from the succeeding number of the last prime number
	long now = primeList[primeList.size()-1] + 1;
	//find the next number until we find a prime
	while (!ifPrime(now))
	{
		now++;
	}
	//add the new prime to our list
	primeList.push_back(now);
}

int maxFactor(int g){
	if (g == 1)
		return g;
	if (ifPrime(g))
		return g;
	int maxFactor = 1;
	int t = 1;
	while (primeList[t] * 2 <= g){
		if (g % primeList[t] == 0)
			maxFactor = primeList[t];
		t++;
	}
	return maxFactor;
}

int main(){
	//freopen("in.txt","r",stdin);
	int n;
	cin >> n;
	vector<int> list;
	for (int i = 0; i < n; i++){
		int cat;
		cin >> cat;
		list.push_back(cat);
	}
	//read in 
	primeList.push_back(2);
	//generate the first nth prime
	for (int i = 2 ; i <= 1300 ; i++)
	{
		primeGenerator();
	}
	//init
	int score = 1;
	int winner = 1; 
	for (int i = 0; i < list.size(); i++){
		if (maxFactor(list[i]) > score){
			score = maxFactor(list[i]);
			winner = list[i];
		}
	}
	//calculation
	cout << winner << endl;
	//cout << "last prime" << primeList[1299] << endl;
	//writeout
	return 0;
	
}
