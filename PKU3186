#include <iostream>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>

using namespace std;

int dp[2001][2001]; // best result for interval [i,j], inclusive
int s[2001][2001];

int main(){
		//freopen("in.txt","r",stdin);
		int n,cat;
		cin >> n;
		vector<int> v;
		for (int i = 0 ;i < n; i++){
			cin >> cat;
			v.push_back(cat);
		}
		//readin v
		for (int i = 0; i < n; i++){
			int partSum = 0;
			for (int j = i; j< n; j++ ){
				partSum += v[j];
				s[i][j] = partSum;
			}
		}
		//s[i][j] = summation over v from i to j, inclusive
		//init dp
		for (int i = 0; i < n; i++){
			dp[i][i] = v[i];
		}//base case
		for (int interval = 1; interval < n ; interval ++){
			for (int i = 0 ; i + interval< n ; i++){
				int j = i + interval;
				int A = v[i] + s[i+1][j] + dp[i+1][j];
				int B = v[j] + s[i][j-1] + dp[i][j-1];
				dp[i][j] = max(A,B);
			}		
		}
		//calc
		cout << dp[0][n-1] << endl;
		//output
		return 0;
}
