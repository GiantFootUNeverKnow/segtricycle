#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <unordered_map>
#include <string>
#include <set>
#include <vector>
#include <cstring>
#include <algorithm>
#include <utility>
#include <iomanip>
#include <stack>

using namespace std;

typedef long double DOUBLE;
typedef vector<DOUBLE> VD;
typedef vector<VD> VVD;
typedef vector<int> VI;

const DOUBLE EPS = 1e-9;

struct LPSolver {
	int m, n;
	VI B, N;
	VVD D;

	LPSolver(const VVD &A, const VD &b, const VD &c) :
		m(b.size()), n(c.size()), N(n + 1), B(m), D(m + 2, VD(n + 2)) {
		for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) D[i][j] = A[i][j];
		for (int i = 0; i < m; i++) { B[i] = n + i; D[i][n] = -1; D[i][n + 1] = b[i]; }
		for (int j = 0; j < n; j++) { N[j] = j; D[m][j] = -c[j]; }
		N[n] = -1; D[m + 1][n] = 1;
	}

	void Pivot(int r, int s) {
		for (int i = 0; i < m + 2; i++) if (i != r)
			for (int j = 0; j < n + 2; j++) if (j != s)
				D[i][j] -= D[r][j] * D[i][s] / D[r][s];
		for (int j = 0; j < n + 2; j++) if (j != s) D[r][j] /= D[r][s];
		for (int i = 0; i < m + 2; i++) if (i != r) D[i][s] /= -D[r][s];
		D[r][s] = 1.0 / D[r][s];
		swap(B[r], N[s]);
	}

	bool Simplex(int phase) {
		int x = phase == 1 ? m + 1 : m;
		while (true) {
			int s = -1;
			for (int j = 0; j <= n; j++) {
				if (phase == 2 && N[j] == -1) continue;
				if (s == -1 || D[x][j] < D[x][s] || D[x][j] == D[x][s] && N[j] < N[s]) s = j;
			}
			if (D[x][s] > -EPS) return true;
			int r = -1;
			for (int i = 0; i < m; i++) {
				if (D[i][s] < EPS) continue;
				if (r == -1 || D[i][n + 1] / D[i][s] < D[r][n + 1] / D[r][s] ||
					(D[i][n + 1] / D[i][s]) == (D[r][n + 1] / D[r][s]) && B[i] < B[r]) r = i;
			}
			if (r == -1) return false;
			Pivot(r, s);
		}
	}

	DOUBLE Solve(VD &x) {
		int r = 0;
		for (int i = 1; i < m; i++) if (D[i][n + 1] < D[r][n + 1]) r = i;
		if (D[r][n + 1] < -EPS) {
			Pivot(r, n);
			if (!Simplex(1) || D[m + 1][n + 1] < -EPS) return -numeric_limits<DOUBLE>::infinity();
			for (int i = 0; i < m; i++) if (B[i] == -1) {
				int s = -1;
				for (int j = 0; j <= n; j++)
					if (s == -1 || D[i][j] < D[i][s] || D[i][j] == D[i][s] && N[j] < N[s]) s = j;
				Pivot(i, s);
			}
		}
		if (!Simplex(2)) return numeric_limits<DOUBLE>::infinity();
		x = VD(n);
		for (int i = 0; i < m; i++) if (B[i] < n) x[B[i]] = D[i][n + 1];
		return D[m][n + 1];
	}
};


int main() {
	/*
	FILE * stream1, *stream2;
	freopen_s(&stream1, "Text.txt", "r", stdin);
	freopen_s(&stream2, "OUTPUT.txt", "w", stdout);*/
	int n,times;
	double cat;
	times = 1;
	cin >> n;
	while (n) {
		//init
		VVD A; VD c;
		int _b[6]; int _a[6][100];		
		for (int i = 0; i < n; i++)	//read in c_{ij}
			c.push_back(0);
		for (int i = 0; i < n; i++) //read in a
			for (int j = 0; j < 3; j++)
				cin >> _a[j][i];
		cin >>_b[0] >> _b[1] >> _b[2]; //read in b
		for (int i = 0; i < 3; i++)
			_b[i + 3] = -1 * _b[i];
		VD b(_b, _b + 6);	//construct b
		for (int i = 0; i < 3; i++) { //construct A
			VD tmp;
			for (int j = 0; j < n; j++)
				tmp.push_back(_a[i][j]);
			A.push_back(tmp);
		}
		for (int i = 0; i < 3; i++) { 
			VD tmp;
			for (int j = 0; j < n; j++)
				tmp.push_back(_a[i][j] * -1);
			A.push_back(tmp);
		}
		//init done
		LPSolver solver(A, b, c);
		VD x;
		DOUBLE value = solver.Solve(x);
		//output
		cout << "Mixture " << times << endl;
		if (value == 0)
			cout << "Possible" << endl;
		else
			cout << "Impossible" << endl;
		times++;
		cin >> n;
		if (n)
			cout << endl;
	}
	return 0;
}
